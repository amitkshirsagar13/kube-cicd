<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description>Setup Jenkins Environment as per requirement</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>1</daysToKeep>
        <numToKeep>2</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REPOSITORY</name>
          <description>GitHub Repository</description>
          <defaultValue>amitkshirsagar13</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_PROJECT_NAME</name>
          <description>GitHub Project Repository location to be used for k8s-cicd</description>
          <defaultValue>kube-cicd</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.55">
    <script>import jenkins.model.*
import hudson.security.*
import com.cloudbees.plugins.credentials.impl.*;
import com.cloudbees.plugins.credentials.*;
import com.cloudbees.plugins.credentials.domains.*;
import jenkins.security.s2m.AdminWhitelistRule
import groovy.json.JsonSlurperClassic
import com.cloudbees.groovy.cps.NonCPS
@NonCPS
def updateUsers(){
    def instance = Jenkins.getInstance()

    def jsonUserList = new File(&apos;/run/secrets/jenkins-user.json&apos;)
    def userList = new JsonSlurperClassic().parseText(jsonUserList.text)
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    userList.users.each{
        def user = it.user.name
        def pass = it.user.password
        println &quot;Creating user &quot; + user + &quot;...&quot;
        hudsonRealm.createAccount(user, pass)
        println &quot;Security User &quot; + user        + &quot; was created&quot;
    }
    instance.setSecurityRealm(hudsonRealm)

    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    instance.setAuthorizationStrategy(strategy)
    instance.save()

    Jenkins.instance.getInjector().getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false)

}

@NonCPS
def updateCredential(){

    def onlineCredentialList = new File(&apos;/run/secrets/jenkins-credentials.json&apos;)
    def credentialList = new JsonSlurperClassic().parseText(onlineCredentialList.text)

    credentialList.credentials.each{
        def id = it.credential.id
        def user = it.credential.user
        def pass = it.credential.password
        def description = it.credential.description

        println &quot;Creating credential &quot; + user + &quot;...&quot;
        Credentials creds = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL,id, description, user, pass)

        SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), creds)
        println &quot;Credential &quot; + user   + &quot; was created&quot;
    }
}

node {
        def gitProjectName = env.GIT_PROJECT_NAME
        def repository = env.GIT_REPOSITORY

        println &quot;Using Git Project Name: &quot; + gitProjectName

        def config = &quot;https://raw.githubusercontent.com/${repository}/${gitProjectName}/master/jenkins/config/config.xml&quot;
        def scriptApproval = &quot;https://raw.githubusercontent.com/${repository}/${gitProjectName}/master/jenkins/config/scriptApproval.xml&quot;
        def url = &quot;http://localhost:8080/safeRestart&quot;
        def onlineUserList = &quot;https://raw.githubusercontent.com/${repository}/${gitProjectName}/master/jenkins/config/users/jenkins-user.json&quot;
        def onlineCredentialList = &quot;https://raw.githubusercontent.com/${repository}/${gitProjectName}/master/jenkins/config/credentials/jenkins-creds.json&quot;

        sh &quot;&quot;&quot;
            curl -s -o /var/jenkins_home/config.xml &quot;${config}&quot;
            curl -s -o /var/jenkins_home/scriptApproval.xml &quot;${scriptApproval}&quot;
            curl -s -o /run/secrets/jenkins-user.json &quot;${onlineUserList}&quot;
            curl -s -o /run/secrets/jenkins-credentials.json &quot;${onlineCredentialList}&quot;
        &quot;&quot;&quot;
        updateUsers()
        updateCredential()

        sh &quot;&quot;&quot;
            curl -s -X POST &quot;${url}&quot; --user &quot;admin:admin&quot;
        &quot;&quot;&quot;
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
